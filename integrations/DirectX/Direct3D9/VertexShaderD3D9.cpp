/****************************************************************************
This source file is (c) Teardrop Games LLC. All rights reserved. 
Redistribution and/or reproduction, in whole or in part, without prior
written permission of a duly authorized representative of Teardrop Games LLC
is prohibited.
****************************************************************************/

#include "stdafx.h"
#include "VertexShaderD3D9.h"
#include "Gfx/Submesh.h"
#include <sstream>
#include <set>
#include <assert.h>

namespace Teardrop {
	namespace Gfx {
		namespace Direct3D9 {

			VertexShader::VertexShader(IDirect3DDevice9* device)
				: mDevice(device)
				, mVS(0)
			{
				assert(mDevice);
			}

			VertexShader::~VertexShader()
			{
			}

			bool VertexShader::initialize(Submesh* submesh)
			{
				// build and compile vertex and pixel shaders
				if (!mSource.length()) {
					// generate source from material definition/expressions

					// first the common parts
					mSource.append(HLSL_COMMON);
				}

				return true;
			}

			bool VertexShader::destroy()
			{
				// release pixel shader, if initialized
				if (mVS) {
					mVS->Release();
					mVS = 0;
				}

				return true;
			}

			void VertexShader::apply()
			{
				assert(mDevice);

				// check to see if PS needs initialized
				if (mVS && mDevice) {
					mDevice->SetVertexShader(mVS);
				}
			}

			const char* VertexShader::HLSL_COMMON =
				"// This shader is autogenerated\n"
				"\n"
				"typedef float4 RGBA;\n"
				"typedef float3 RGB;\n"
				"\n"
				;

		} // Direct3D9
	} // Gfx
} // Teardrop
